item_find_task:
  description: >
    Step 1: If needed improve the user-provided item description “{item_details}” using natural language to make it
    more suitable for e-commerce search also Use only raw strings for tool input arguments make sure you include important
    item_details like brand, model, color, size, and any other relevant specifications.Do not include type or description fields.
    while giving the input to the tool the format should be like this:
    "query": "wireless earphones under 1500 INR"
    "location": "India"

    Not like this:
    "query": {{"description": "wireless...000 INR", "type": "str"}}
    "location": {{"description": "India", "type": "str"}}

    
    Step 2: Use the refined description to query Google Shopping via SerpAPI for “{target_item}”.

    Step 3: From the results, collect structured product data:
      - title
      - price
      - source
      - product_link
      - rating
      - delivery

    Ensure that only products from Indian e-commerce sources are included, and the results closely match
    the user’s refined criteria.

  expected_output: >
    A JSON array of dictionaries. Each dictionary must contain:
      - title
      - price
      - source
      - product_link
      - rating
      - delivery
    Do not return empty results. Do not wrap in markdown/code fences.

  agent: item_find
  output_file: output/results.json




# scrape_agent_task:
#   description: >
#     For each URL in the input list, navigate to the product page and extract
#     detailed product data fields (title, price, specs, ratings).
#     Ensure JavaScript‑rendered content is fully loaded before extraction.
#   expected_output: >
#     A JSON array of objects, each with keys:
#       - title (string)
#       - price (number or string with currency)
#       - specifications (object of attribute→value)
#       - rating (number)
#       - review_count (integer)
#     Do not include code fences or markdown.
#   agent: scrape_agent
#   depends_on:
#     - item_find_task
#   output_file: output/results.json

item_compare_task:
  description: >
    Analyze shopping results using available metadata to generate ranked product insights and list top 5 products or less.
    Make sure the top products you will mention have item_details like brand, model, color, size, and any other relevant specifications
    close to mentioned in the user-provided item description “{item_details}”.
  expected_output: >
    A markdown report that contains top 5 product recommendations based on the analysis.
    Each recommendation should include:
    1. Hyperlinked list of top 5 products that closely fits the item description with price and source
    2. "Best Value" pick with justification
    3. "Fastest Delivery" option using the delivery field
    4. "Top Rated" pick based on price and rating
    5. Comparison matrix of price and delivery info
    Do not wrap in markdown or code fences.
  agent: compare_agent
  output_file: output/final_decision.md

  
